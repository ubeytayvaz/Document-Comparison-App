import streamlit as st
import fitz  # PyMuPDF kÃ¼tÃ¼phanesi
import difflib
import base64
import os
import tempfile
import subprocess # Word'den PDF'e dÃ¶nÃ¼ÅŸtÃ¼rme iÃ§in eklendi

# Sayfa yapÄ±landÄ±rmasÄ±nÄ± geniÅŸ olarak ayarlayarak karÅŸÄ±laÅŸtÄ±rma iÃ§in daha fazla alan saÄŸlÄ±yoruz
st.set_page_config(layout="wide", page_title="GÃ¶rsel DÃ¶kÃ¼man KarÅŸÄ±laÅŸtÄ±rma AracÄ±")

def convert_to_pdf_bytes(uploaded_file):
    """
    YÃ¼klenen dosyanÄ±n tÃ¼rÃ¼nÃ¼ kontrol eder ve Word belgesiyse PDF byte'larÄ±na dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r.
    Bu iÅŸlem iÃ§in sistemde LibreOffice'in yÃ¼klÃ¼ olmasÄ± gerekir.
    Zaten PDF ise doÄŸrudan byte'larÄ± dÃ¶ndÃ¼rÃ¼r.
    """
    file_bytes = uploaded_file.getvalue()
    file_name = uploaded_file.name

    if file_name.lower().endswith(('.docx', '.doc')):
        try:
            st.info(f"'{file_name}' dosyasÄ± PDF'e dÃ¶nÃ¼ÅŸtÃ¼rÃ¼lÃ¼yor...")
            with tempfile.TemporaryDirectory() as temp_dir:
                temp_word_path = os.path.join(temp_dir, file_name)
                
                # YÃ¼klenen Word dosyasÄ±nÄ± geÃ§ici bir yola yaz
                with open(temp_word_path, "wb") as f:
                    f.write(file_bytes)

                # LibreOffice'i komut satÄ±rÄ±ndan Ã§aÄŸÄ±rarak PDF'e dÃ¶nÃ¼ÅŸtÃ¼r
                try:
                    subprocess.run(
                        ['libreoffice', '--headless', '--convert-to', 'pdf', temp_word_path, '--outdir', temp_dir],
                        check=True,
                        capture_output=True
                    )
                except FileNotFoundError:
                    st.error("HATA: Word dosyasÄ± dÃ¶nÃ¼ÅŸtÃ¼rme baÅŸarÄ±sÄ±z.")
                    st.warning("Bu Ã¶zelliÄŸin Ã§alÄ±ÅŸmasÄ± iÃ§in sisteminizde LibreOffice'in yÃ¼klÃ¼ olmasÄ± gerekmektedir. LÃ¼tfen LibreOffice'i yÃ¼kleyip tekrar deneyin.")
                    return None
                except subprocess.CalledProcessError as e:
                    st.error(f"LibreOffice dÃ¶nÃ¼ÅŸtÃ¼rme sÄ±rasÄ±nda bir hata verdi. LÃ¼tfen dosyanÄ±n bozuk olmadÄ±ÄŸÄ±ndan emin olun. Hata detayÄ±: {e.stderr.decode()}")
                    return None

                # DÃ¶nÃ¼ÅŸtÃ¼rÃ¼len PDF'in yolunu oluÅŸtur ve oku
                pdf_filename = os.path.splitext(file_name)[0] + ".pdf"
                temp_pdf_path = os.path.join(temp_dir, pdf_filename)

                if os.path.exists(temp_pdf_path):
                    with open(temp_pdf_path, "rb") as f:
                        pdf_bytes = f.read()
                    st.info(f"'{file_name}' baÅŸarÄ±yla dÃ¶nÃ¼ÅŸtÃ¼rÃ¼ldÃ¼.")
                    return pdf_bytes
                else:
                    st.error(f"DÃ¶nÃ¼ÅŸtÃ¼rme sonrasÄ± PDF dosyasÄ± bulunamadÄ±. LÃ¼tfen LibreOffice'in dÃ¼zgÃ¼n Ã§alÄ±ÅŸtÄ±ÄŸÄ±ndan emin olun.")
                    return None

        except Exception as conversion_error:
            st.error(f"'{file_name}' dosyasÄ± dÃ¶nÃ¼ÅŸtÃ¼rÃ¼lÃ¼rken genel bir hata oluÅŸtu: {conversion_error}")
            return None
    else:
        # Dosya zaten PDF ise byte'larÄ± doÄŸrudan dÃ¶ndÃ¼r
        return file_bytes

def compare_and_highlight(pdf_bytes1, pdf_bytes2):
    """
    Ä°ki PDF'i karÅŸÄ±laÅŸtÄ±rÄ±r, farklarÄ± bulur ve yeni PDF'ler Ã¼zerinde vurgular.
    - Silinen metinler (sadece ilk PDF'te olanlar) kÄ±rmÄ±zÄ± ile vurgulanÄ±r.
    - Eklenen metinler (sadece ikinci PDF'te olanlar) sarÄ± ile vurgulanÄ±r.
    - Yeri deÄŸiÅŸen metinler her iki PDF'te de aÃ§Ä±k mavi ile vurgulanÄ±r.
    """
    doc1 = fitz.open(stream=pdf_bytes1, filetype="pdf")
    doc2 = fitz.open(stream=pdf_bytes2, filetype="pdf")

    # KarÅŸÄ±laÅŸtÄ±rÄ±lacak sayfa sayÄ±sÄ±, en uzun PDF'e gÃ¶re belirlenir
    max_pages = max(doc1.page_count, doc2.page_count)

    for i in range(max_pages):
        # SayfalarÄ± al, eÄŸer bir PDF daha kÄ±saysa boÅŸ sayfa olarak kabul et
        page1 = doc1.load_page(i) if i < doc1.page_count else None
        page2 = doc2.load_page(i) if i < doc2.page_count else None

        # Sayfa boÅŸsa, atla
        if page1 is None or page2 is None:
            continue

        # KarÅŸÄ±laÅŸtÄ±rma iÃ§in sayfalardaki kelimeleri ve konumlarÄ±nÄ± al
        words1 = page1.get_text("words")
        words2 = page2.get_text("words")
        
        # Sadece kelime metinlerini iÃ§eren listeler oluÅŸtur
        text1 = [w[4] for w in words1]
        text2 = [w[4] for w in words2]

        # difflib ile kelime dizileri arasÄ±ndaki farklarÄ± bul
        matcher = difflib.SequenceMatcher(None, text1, text2, autojunk=False)
        opcodes = matcher.get_opcodes()

        # FarklÄ±lÄ±klara gÃ¶re vurgulamalarÄ± ekle
        for tag, i1, i2, j1, j2 in opcodes:
            if tag == 'replace' or tag == 'delete':
                # KÄ±rmÄ±zÄ±: Eski dÃ¶kÃ¼manda silinmiÅŸ veya deÄŸiÅŸtirilmiÅŸ metinler
                for k in range(i1, i2):
                    word_bbox = fitz.Rect(words1[k][:4])
                    highlight = page1.add_highlight_annot(word_bbox)
                    highlight.set_colors(stroke=(1, 0, 0)) # KÄ±rmÄ±zÄ± renk
                    highlight.update()

            if tag == 'replace' or tag == 'insert':
                # SarÄ±: Yeni dÃ¶kÃ¼mana eklenmiÅŸ veya deÄŸiÅŸtirilmiÅŸ metinler
                for k in range(j1, j2):
                    word_bbox = fitz.Rect(words2[k][:4])
                    highlight = page2.add_highlight_annot(word_bbox)
                    highlight.set_colors(stroke=(1, 1, 0)) # SarÄ± renk
                    highlight.update()
            
            if tag == 'equal':
                 # Mavi: Yeri deÄŸiÅŸmiÅŸ metinler
                 for k in range(i2 - i1):
                    word1_data = words1[i1 + k]
                    word2_data = words2[j1 + k]
                    
                    rect1 = fitz.Rect(word1_data[:4])
                    rect2 = fitz.Rect(word2_data[:4])

                    # Kelimenin pozisyonu belirli bir eÅŸikten fazla deÄŸiÅŸtiyse
                    if abs(rect1.x0 - rect2.x0) > 10 or abs(rect1.y0 - rect2.y0) > 10:
                        h1 = page1.add_highlight_annot(rect1)
                        h1.set_colors(stroke=(0.5, 0.8, 1)) # AÃ§Ä±k Mavi
                        h1.update()
                        
                        h2 = page2.add_highlight_annot(rect2)
                        h2.set_colors(stroke=(0.5, 0.8, 1)) # AÃ§Ä±k Mavi
                        h2.update()

    # DeÄŸiÅŸiklikler yapÄ±lmÄ±ÅŸ PDF'leri byte olarak kaydet
    output_bytes1 = doc1.tobytes()
    output_bytes2 = doc2.tobytes()

    doc1.close()
    doc2.close()

    return output_bytes1, output_bytes2

def render_all_pages_view(pdf_bytes1, pdf_bytes2):
    """
    VurgulanmÄ±ÅŸ PDF'leri sayfa sayfa resim olarak yan yana, alt alta gÃ¶sterir.
    """
    doc1 = fitz.open(stream=pdf_bytes1, filetype="pdf")
    doc2 = fitz.open(stream=pdf_bytes2, filetype="pdf")
    
    max_pages = max(doc1.page_count, doc2.page_count)

    st.markdown("---") # AyÄ±rÄ±cÄ± Ã§izgi

    for i in range(max_pages):
        col1, col2 = st.columns(2)

        with col1:
            if i < doc1.page_count:
                page1 = doc1.load_page(i)
                # GÃ¶rÃ¼ntÃ¼ boyutunu ayarlamak iÃ§in DPI (dots per inch) deÄŸeri
                pix = page1.get_pixmap(dpi=150) 
                img_bytes = pix.tobytes("png")
                st.image(img_bytes, use_container_width=True)
            else:
                # BoÅŸ sayfalar iÃ§in yer tutucu
                st.markdown("&nbsp;", unsafe_allow_html=True)
        
        with col2:
            if i < doc2.page_count:
                page2 = doc2.load_page(i)
                pix = page2.get_pixmap(dpi=150)
                img_bytes = pix.tobytes("png")
                st.image(img_bytes, use_container_width=True)
            else:
                # BoÅŸ sayfalar iÃ§in yer tutucu
                st.markdown("&nbsp;", unsafe_allow_html=True)

    doc1.close()
    doc2.close()


# --- Streamlit ArayÃ¼zÃ¼ ---
st.title("ğŸ“„ GÃ¶rsel DÃ¶kÃ¼man KarÅŸÄ±laÅŸtÄ±rma ve Fark Vurgulama AracÄ±")
st.markdown("""
<div style="background-color: #e6f3ff; border-left: 5px solid #1a73e8; padding: 10px; border-radius: 5px; margin-bottom: 1rem;">
Soldaki alana <b>eski</b> versiyonu, saÄŸdaki alana <b>yeni</b> versiyonu yÃ¼kleyerek aradaki farklarÄ± gÃ¶rebilirsiniz. PDF ve Word (.docx, .doc) formatlarÄ± desteklenmektedir.
<ul>
    <li><b><span style='color:red;'>KÄ±rmÄ±zÄ± Vurgu</span></b>: Eski dÃ¶kÃ¼manda olup yeni dÃ¶kÃ¼manda olmayan (silinmiÅŸ) metinler.</li>
    <li><b><span style='color:darkgoldenrod;'>SarÄ± Vurgu</span></b>: Yeni dÃ¶kÃ¼manda olup eski dÃ¶kÃ¼manda olmayan (eklenmiÅŸ) metinler.</li>
    <li><b><span style='color:cornflowerblue;'>AÃ§Ä±k Mavi Vurgu</span></b>: Her iki dÃ¶kÃ¼manda da bulunan ancak yeri deÄŸiÅŸmiÅŸ metinler.</li>
</ul>
</div>
""", unsafe_allow_html=True)


col1, col2 = st.columns(2)

with col1:
    st.header("Eski Versiyon (Sol)")
    uploaded_file1 = st.file_uploader(
        "LÃ¼tfen eski dÃ¶kÃ¼manÄ± seÃ§in (PDF, DOCX)",
        type=['pdf', 'docx', 'doc'],
        key="file1"
    )

with col2:
    st.header("Yeni Versiyon (SaÄŸ)")
    uploaded_file2 = st.file_uploader(
        "LÃ¼tfen yeni dÃ¶kÃ¼manÄ± seÃ§in (PDF, DOCX)",
        type=['pdf', 'docx', 'doc'],
        key="file2"
    )

if uploaded_file1 and uploaded_file2:
    
    pdf_bytes1 = convert_to_pdf_bytes(uploaded_file1)
    pdf_bytes2 = convert_to_pdf_bytes(uploaded_file2)
    
    # Sadece iki dosya da baÅŸarÄ±yla iÅŸlendiyse devam et
    if pdf_bytes1 and pdf_bytes2:
        with st.spinner("DÃ¶kÃ¼manlar karÅŸÄ±laÅŸtÄ±rÄ±lÄ±yor ve farklÄ±lÄ±klar vurgulanÄ±yor... Bu iÅŸlem dÃ¶kÃ¼manlarÄ±n boyutuna gÃ¶re zaman alabilir."):
            try:
                # KarÅŸÄ±laÅŸtÄ±rma fonksiyonunu Ã§aÄŸÄ±r
                highlighted_pdf1_bytes, highlighted_pdf2_bytes = compare_and_highlight(pdf_bytes1, pdf_bytes2)

                st.success("KarÅŸÄ±laÅŸtÄ±rma tamamlandÄ±! VurgulanmÄ±ÅŸ versiyonlarÄ± aÅŸaÄŸÄ±da gÃ¶rebilir veya indirebilirsiniz.")
                
                # Ä°ndirme butonlarÄ±
                dl_col1, dl_col2 = st.columns(2)
                with dl_col1:
                    st.download_button(
                        label="Eski Versiyonu Ä°ndir (VurgulanmÄ±ÅŸ)",
                        data=highlighted_pdf1_bytes,
                        file_name=f"vurgulanmis_{uploaded_file1.name.rsplit('.', 1)[0]}.pdf",
                        mime="application/pdf"
                    )
                with dl_col2:
                    st.download_button(
                        label="Yeni Versiyonu Ä°ndir (VurgulanmÄ±ÅŸ)",
                        data=highlighted_pdf2_bytes,
                        file_name=f"vurgulanmis_{uploaded_file2.name.rsplit('.', 1)[0]}.pdf",
                        mime="application/pdf"
                    )
                
                # SonuÃ§larÄ± sayfa sayfa resim olarak gÃ¶ster
                render_all_pages_view(highlighted_pdf1_bytes, highlighted_pdf2_bytes)


            except Exception as e:
                st.error(f"DÃ¶kÃ¼manlar iÅŸlenirken bir hata oluÅŸtu: {e}")
                st.error("LÃ¼tfen dosyalarÄ±n geÃ§erli ve metin okunabilir olduÄŸundan emin olun. TaranmÄ±ÅŸ (resim tabanlÄ±) dÃ¶kÃ¼manlar desteklenmemektedir.")

